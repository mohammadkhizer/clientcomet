// This is an autogenerated file from Firebase Studio.

'use server';

/**
 * @fileOverview AI-powered FAQ response flow for ByteBrusters.
 *
 * This file defines a Genkit flow that generates personalized responses to user questions about ByteBrusters.
 * It incorporates a tool to determine if a canned response is more appropriate, allowing for efficient and accurate information delivery.
 *
 * - aiFAQResponse - A function that handles the FAQ response process.
 * - AiFAQResponseInput - The input type for the aiFAQResponse function.
 * - AiFAQResponseOutput - The return type for the aiFAQResponse function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

// Define the input schema for the flow
const AiFAQResponseInputSchema = z.object({
  question: z.string().describe('The user question about ByteBrusters.'),
});
export type AiFAQResponseInput = z.infer<typeof AiFAQResponseInputSchema>;

// Define the output schema for the flow
const AiFAQResponseOutputSchema = z.object({
  answer: z.string().describe('The AI-generated answer to the user question.'),
  useCannedResponse: z.boolean().describe('Whether a canned response is more appropriate.'),
});
export type AiFAQResponseOutput = z.infer<typeof AiFAQResponseOutputSchema>;

// Exported function to call the flow
export async function aiFAQResponse(input: AiFAQResponseInput): Promise<AiFAQResponseOutput> {
  return aiFAQResponseFlow(input);
}

// Define a tool to determine if a canned response is more appropriate
const shouldUseCannedResponse = ai.defineTool(
  {
    name: 'shouldUseCannedResponse',
    description: 'Determines whether a canned response is more appropriate than generating a new AI response, such as when asked about company contact information.',
    inputSchema: z.object({
      question: z.string().describe('The user question.'),
    }),
    outputSchema: z.boolean().describe('Whether a canned response should be used.'),
  },
  async input => {
    // Implement logic to determine if a canned response is more appropriate
    // For example, check if the question is about contact information, services offered, etc.
    // Return true if a canned response is more appropriate, false otherwise.
    const question = input.question.toLowerCase();
    if (question.includes('contact') || question.includes('address') || question.includes('phone')) {
      return true;
    }
    return false;
  }
);

// Define the prompt for generating the FAQ response
const faqResponsePrompt = ai.definePrompt({
  name: 'faqResponsePrompt',
  input: {schema: AiFAQResponseInputSchema},
  output: {schema: AiFAQResponseOutputSchema},
  tools: [shouldUseCannedResponse],
  prompt: `You are an AI assistant providing information about ByteBrusters.

  Generate a helpful and informative answer to the following question:
  {{question}}

  Before answering, use the shouldUseCannedResponse tool to determine if a canned response is more appropriate.
  If the tool returns true, indicate in the answer that a canned response should be used instead.
  Do not provide contact details directly, let the tool determine if the user should use a canned response or not.
  `,
});

// Define the Genkit flow for generating the FAQ response
const aiFAQResponseFlow = ai.defineFlow(
  {
    name: 'aiFAQResponseFlow',
    inputSchema: AiFAQResponseInputSchema,
    outputSchema: AiFAQResponseOutputSchema,
  },
  async input => {
    const {
      output: {answer, useCannedResponse},
    } = await faqResponsePrompt(input);

    return {
      answer: answer!,
      useCannedResponse: useCannedResponse!,
    };
  }
);
